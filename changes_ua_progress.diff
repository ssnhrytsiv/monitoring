diff --git a/app/flows/batch_links/progress_ua.py b/app/flows/batch_links/progress_ua.py
new file mode 100644
index 0000000..1111111
--- /dev/null
+++ b/app/flows/batch_links/progress_ua.py
@@ -0,0 +1,170 @@
+from __future__ import annotations
+import time
+from dataclasses import dataclass, field
+from typing import List, Optional
+
+from telethon import TelegramClient
+
+def _esc(s: str) -> str:
+    if not s:
+        return ""
+    return (
+        s.replace("&", "&amp;")
+         .replace("<", "&lt;")
+         .replace(">", "&gt;")
+    )
+
+@dataclass
+class DebouncedProgressUA:
+    """
+    ¬´–ñ–∏–≤–µ¬ª –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –¥–µ–±–∞—É–Ω—Å–æ–º –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –ø–æ—Å–∏–ª–∞–Ω—å.
+    """
+    client: TelegramClient
+    chat_id: int
+    message_id: int
+    debounce_sec: float = 3.0
+
+    processed: int = 0
+    total: int = 0
+    count_joined: int = 0
+    count_already: int = 0
+    count_bad: int = 0
+    count_flood: int = 0
+
+    flood_sleep_left: Optional[int] = None
+    flood_session_name: Optional[str] = None
+
+    tail_lines: List[str] = field(default_factory=list)
+    _last_push_ts: float = 0.0
+
+    def set_total(self, n: int) -> None:
+        self.total = max(0, int(n))
+
+    def step_processed(self, inc: int = 1) -> None:
+        self.processed = min(self.total, self.processed + max(1, int(inc)))
+
+    def bump(self, kind: str) -> None:
+        if kind == "joined":
+            self.count_joined += 1
+        elif kind == "already":
+            self.count_already += 1
+        elif kind in ("invalid", "private", "error"):
+            self.count_bad += 1
+        elif kind == "flood":
+            self.count_flood += 1
+
+    def set_flood_sleep(self, seconds: int, session_name: Optional[str] = None) -> None:
+        self.flood_sleep_left = max(0, int(seconds))
+        self.flood_session_name = session_name or None
+
+    def clear_flood_sleep(self) -> None:
+        self.flood_sleep_left = None
+        self.flood_session_name = None
+
+    def append_tail(self, line: str) -> None:
+        self.tail_lines.append(line)
+        if len(self.tail_lines) > 12:
+            self.tail_lines.pop(0)
+
+    async def push_now(self) -> None:
+        txt = self._render_html()
+        await self.client.edit_message(self.chat_id, self.message_id, txt, parse_mode="html")
+        self._last_push_ts = time.time()
+
+    async def push_debounced(self) -> None:
+        now = time.time()
+        if now - self._last_push_ts >= self.debounce_sec:
+            await self.push_now()
+
+    def _render_html(self) -> str:
+        head = (
+            "üì¶ <b>–ü–∞–∫–µ—Ç –ø–æ—Å–∏–ª–∞–Ω—å</b> ‚Äî "
+            f"{'–æ–±—Ä–æ–±–ª—è—é‚Ä¶' if self.processed < self.total else '–≥–æ—Ç–æ–≤–æ ‚úÖ'}\n"
+            f"{self._progress_bar()}  {self.processed}/{self.total}\n"
+        )
+        flood = ""
+        if self.flood_sleep_left is not None:
+            who = f" ‚Äî {self._mono(self.flood_session_name)}" if self.flood_session_name else ""
+            flood = f"‚è≥ <i>–°–ø–ª—é {self.flood_sleep_left} —Å{who}</i>\n"
+
+        stats = (
+            f"‚úÖ <b>–ø—ñ–¥–ø–∏—Å–∞–Ω–æ:</b> {self.count_joined}    "
+            f"üîÅ <b>–≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ:</b> {self.count_already}    "
+            f"‚ùå <b>–Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ/–ø—Ä–∏–≤–∞—Ç–Ω—ñ/–ø–æ–º–∏–ª–∫–∞:</b> {self.count_bad}    "
+            f"‚è≥ <b>flood:</b> {self.count_flood}\n"
+        )
+
+        tail = ""
+        if self.tail_lines:
+            tail = "\nüßæ <b>–ü—ñ–¥—Å—É–º–æ–∫ (–æ—Å—Ç–∞–Ω–Ω—ñ):</b>\n<pre>" + "\n".join(self.tail_lines) + "</pre>"
+
+        return head + flood + stats + tail
+
+    def _progress_bar(self, width: int = 24) -> str:
+        total = max(1, self.total)
+        done = min(total, self.processed)
+        fill = int(width * done / total)
+        return "‚ñ∞" * fill + "‚ñ±" * max(0, width - fill)
+
+    @staticmethod
+    def _mono(s: Optional[str]) -> str:
+        return f"<code>{_esc(s or '')}</code>"
diff --git a/app/flows/batch_links/formatting_ua.py b/app/flows/batch_links/formatting_ua.py
new file mode 100644
index 0000000..2222222
--- /dev/null
+++ b/app/flows/batch_links/formatting_ua.py
@@ -0,0 +1,76 @@
+from __future__ import annotations
+
+def esc(s: str) -> str:
+    if not s:
+        return ""
+    return (
+        s.replace("&", "&amp;")
+         .replace("<", "&lt;")
+         .replace(">", "&gt;")
+    )
+
+def ellipsis(s: str, n: int) -> str:
+    s = s or ""
+    return s if len(s) <= n else (s[: max(0, n - 1)] + "‚Ä¶")
+
+def pad(s: str, w: int) -> str:
+    s = s or ""
+    if len(s) >= w:
+        return s
+    return s + " " * (w - len(s))
+
+def col(s: str, w: int) -> str:
+    return pad(ellipsis(esc(s), w), w)
+
+def short_url(u: str, width: int = 36) -> str:
+    return ellipsis(u or "", width)
+
+def human_status(kind: str, cached: bool) -> tuple[str, str]:
+    """
+    kind: 'joined'|'already'|'invalid'|'private'|'error'|'flood'
+    cached: True —è–∫—â–æ –±—Ä–∞–ª–∏ –∑—ñ —Å–≤–æ—î—ó –ë–î/–∫–µ—à—É
+    """
+    if kind == "joined":
+        return "‚úÖ", ("–≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π" if cached else "–ø—ñ–¥–ø–∏—Å–∞–Ω–æ")
+    if kind == "already":
+        return "‚úÖ", "–≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π"
+    if kind in ("invalid", "private", "error"):
+        return "‚ùå", ("–Ω–µ —Ä–æ–±–æ—á–∏–π –ª—ñ–Ω–∫" if cached else "–ø–æ–º–∏–ª–∫–∞/–ø—Ä–∏–≤–∞—Ç–Ω–∏–π/–Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π")
+    if kind == "flood":
+        return "‚è≥", "–∑–∞—Ç—Ä–∏–º–∫–∞ (flood)"
+    return "‚Ä¢", kind
+
+def build_row(
+    idx: int,
+    url: str,
+    title: str | None,
+    kind: str,
+    cached: bool,
+    session_name: str | None = None,
+    flood_sec: int | None = None,
+) -> str:
+    """
+    –§–æ—Ä–º—É—î–º–æ ¬´—Ä—è–¥–æ–∫ —Ç–∞–±–ª–∏—Ü—ñ¬ª –¥–ª—è <pre>‚Ä¶</pre>.
+    –ö–æ–ª–æ–Ω–∫–∏:
+      ‚Ññ | –ù–∞–∑–≤–∞/URL | –°—Ç–∞—Ç—É—Å | –î–æ–¥–∞—Ç–∫–æ–≤–æ
+    """
+    emoji, txt = human_status(kind, cached)
+    num = col(f"{idx}.", 4)
+    name = col(title or short_url(url), 40)
+    stat = col(f"{emoji} {txt}", 22)
+
+    extra = ""
+    if kind == "flood" and (flood_sec or 0) > 0:
+        if session_name:
+            extra = f"(—Å–ø–ª—é {int(flood_sec)}—Å; {session_name})"
+        else:
+            extra = f"(—Å–ø–ª—é {int(flood_sec)}—Å)"
+    elif session_name:
+        extra = f"[{session_name}]"
+
+    return f"{num}{name}{stat}{esc(extra)}"