# app/utils/formatting.py
from __future__ import annotations

from typing import Any, Dict, Iterable, List
from html import escape as _esc

# –∫–∞—Ä—Ç–∞ —Å—Ç–∞—Ç—É—Å—ñ–≤: –∫–æ–¥ -> —Ç–µ–∫—Å—Ç –∑ —ñ–∫–æ–Ω–∫–æ—é
_STATUS_MAP: Dict[str, str] = {
    "joined":      "‚úÖ –ø—Ä–∏—î–¥–Ω–∞–Ω–æ",
    "already":     "‚ôªÔ∏è –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π",
    "requested":   "üïäÔ∏è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø",
    "invalid":     "‚ùå –Ω–µ–≤–∞–ª—ñ–¥–Ω–µ",
    "private":     "üîí –ø—Ä–∏–≤–∞—Ç–Ω–∏–π",
    "blocked":     "üö´ –±–ª–æ–∫",
    "too_many":    "üöß –ª—ñ–º—ñ—Ç",
    "flood_wait":  "‚è≥ FLOOD_WAIT",
    "waiting":     "‚è∏ –æ—á—ñ–∫—É—î",
    "cached":      "‚òëÔ∏è –∫–µ—à",
    "temp":        "‚ÑπÔ∏è —Ç–∏–º—á–∞—Å–æ–≤–æ",
    "duplicate":   "üîÅ –¥—É–±–ª—ñ–∫–∞—Ç",
}

def _status_text(code: str, extra: str | None = None) -> str:
    base = _STATUS_MAP.get(code, code)
    return f"{base} ({_esc(extra)})" if extra else base


def fmt_result_line(
    idx: int,
    url: str,
    code: str,
    actor: str | None = None,
    extra: str | None = None,
    title: str | None = None,
) -> dict:
    return {
        "idx": idx,
        "url": url,
        "title": title or "",
        "status_code": code,
        "status_text": _status_text(code, extra),
        "actor": actor or "",
    }


def fmt_summary(rows: Iterable[Any]) -> str:
    """
    –†–µ–Ω–¥–µ—Ä —É HTML-—Ç–µ–∫—Å—Ç —ñ–∑ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Ä—è–¥–∫—ñ–≤ ('\\n') —É —Ñ–æ—Ä–º–∞—Ç—ñ:
      1. –ü–æ–≤–Ω–∞ –Ω–∞–∑–≤–∞
         <a href="...">–ü–æ—Å–∏–ª–∞–Ω–Ω—è</a> ‚Äî –°—Ç–∞—Ç—É—Å

    –ú—ñ–∂ –∑–∞–ø–∏—Å–∞–º–∏ ‚Äî –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ.
    """
    structured: List[dict] = []
    for r in rows:
        if isinstance(r, dict) and {"idx", "url", "title", "status_code", "status_text", "actor"} <= set(r.keys()):
            structured.append(r)

    if not structured:
        return ""

    blocks: List[str] = []
    for r in structured:
        idx   = r["idx"]
        url   = r["url"]
        title = (r.get("title") or "").strip() or "‚Äî"
        stat  = r["status_text"]

        top_line = f"{idx}. {_esc(title)}"
        link_line = f"<a href=\"{_esc(url)}\">–ü–æ—Å–∏–ª–∞–Ω–Ω—è</a> ‚Äî {_esc(stat)}"

        blocks.append(f"{top_line}\n{link_line}")

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ ¬´—á–∏—Å—Ç–∏–π¬ª HTML —ñ–∑ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Ä—è–¥–∫—ñ–≤.
    return "\n\n".join(blocks)