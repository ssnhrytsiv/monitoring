from __future__ import annotations

import logging
import time
import asyncio
from typing import Iterable, List, Optional

from app.plugins.progress_live import DebouncedProgress
from app.utils.throttle import throttle_between_links, throttle_probe
from app.utils.formatting import fmt_result_line, fmt_summary
from app.services.joiner import probe_channel_id, ensure_join
from app.services.account_pool import (
    iter_pool_clients,
    bump_cooldown,
    mark_flood,
    mark_limit,
)
from app.services.db import (
    upsert_membership, get_membership, any_final_for_channel,
    url_get, url_put,
    channel_title_get, channel_title_put,
    url_title_get, url_title_put,
    url_channel_get, url_channel_put,
    backoff_get, backoff_set,
    map_invite_get, map_invite_set,
)
from app.services.link_queue import enqueue as lq_enqueue
from .common import display_name

log = logging.getLogger("flow.batch_links.process")


async def _micro_pause() -> None:
    """–ö—Ä–∏—Ö—ñ—Ç–Ω–∞ –ø–∞—É–∑–∞, —â–æ–± –Ω–µ ¬´—Å–ø–∞–º–∏—Ç–∏¬ª —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è–º–∏ —ñ –ª–æ—è–ª—å–Ω–æ –ø–æ–≤–æ–¥–∏—Ç–∏—Å—å, –∞–ª–µ –±–µ–∑ –∑–∞–π–≤–∏—Ö –∑–∞—Ç—Ä–∏–º–æ–∫."""
    await asyncio.sleep(0.05)


async def process_links(
    *,
    links: Iterable[str],
    progress: DebouncedProgress,
    monitor_buffer,
    **kwargs,
) -> None:
    links = list(links)
    if not links:
        await progress.finish(footer="‚ùå –ü–æ—Å–∏–ª–∞–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    used: set[str] = set()
    results: List[dict] = []

    log.info("batch start: raw=%d uniq=%d", len(links), len(set(links)))

    # –∫–ª—ñ—î–Ω—Ç –¥–ª—è probe (—Ç—ñ–ª—å–∫–∏ –∫–æ–ª–∏ –∫–µ—à—ñ –Ω–µ –¥–æ–ø–æ–º–æ–≥–ª–∏)
    probe_client = None
    slots_probe = list(iter_pool_clients())
    if slots_probe:
        probe_client = getattr(slots_probe[0], "client", slots_probe[0])

    for idx, url in enumerate(links, start=1):
        progress.set_current(url)

        # –ª–æ–∫–∞–ª—å–Ω–∏–π –¥—É–±–ª—ñ–∫–∞—Ç —É –º–µ–∂–∞—Ö –ø–∞–∫–µ—Ç–∞ (–±–µ–∑ –≤–µ–ª–∏–∫–∏—Ö –ø–∞—É–∑)
        if url in used:
            results.append(fmt_result_line(idx, url, "duplicate"))
            progress.add_status("already")  # –¥—É–±–ª—ñ–∫–∞—Ç —Ä–∞—Ö—É—î–º–æ —è–∫ ¬´–≤–∂–µ —î¬ª
            used.add(url)
            await _micro_pause()
            continue
        used.add(url)

        # 1) –ü–æ—à—É–∫ channel_id –±–µ–∑ –º–µ—Ä–µ–∂—ñ
        channel_id: Optional[int] = url_channel_get(url)
        title_cached: str = channel_title_get(channel_id) or "" if channel_id else ""

        # 1.1) –Ø–∫—â–æ —Ü–µ —ñ–Ω–≤–∞–π—Ç (t.me/+ –∞–±–æ joinchat) ‚Äî –ø—Ä–æ–±—É—î–º–æ invite_map (–∫–ª—é—á ‚Äî –ø–æ–≤–Ω–∏–π URL)
        if channel_id is None and ("t.me/+" in url or "joinchat" in url):
            cid_inv, title_inv = map_invite_get(url)
            if cid_inv is not None:
                channel_id = cid_inv
            if title_inv and not title_cached:
                title_cached = title_inv

        # 1.2) –Ø–∫—â–æ –¥–æ—Å—ñ –Ω—ñ—á–æ–≥–æ ‚Äî –æ–±–µ—Ä–µ–∂–Ω–∏–π probe (—Ü–µ –º–µ—Ä–µ–∂–µ–≤–∏–π –≤–∏–∫–ª–∏–∫, —Ç—Ä–æ—Ç–ª–∏–º–æ —á–µ—Ä–µ–∑ throttle_probe)
        if channel_id is None and probe_client is not None:
            try:
                log.debug("process probe: %s", url)
                await throttle_probe(url)  # üëà –æ–±–µ—Ä–µ–∂–Ω–∞ –∫–æ—Ä–æ—Ç–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ probe
                cid_probe, title_probe, kind_probe, invite_hash = await probe_channel_id(probe_client, url)
                channel_id = cid_probe
                if title_probe:
                    title_cached = title_cached or title_probe
                if invite_hash:
                    map_invite_set(url, cid_probe, title_probe or None)
                if cid_probe is not None:
                    url_channel_put(url, cid_probe)
                    if title_probe:
                        channel_title_put(cid_probe, title_probe)
            except Exception:
                # –∑–∞–ª–∏—à–∞—î–º–æ channel_id=None, –¥–∞–ª—ñ –ø—ñ–¥—Å—Ç—Ä–∞—Ö—É—î–º–æ—Å—å –∫–µ—à–µ–º URL
                pass

        # 2) –î–µ–¥—É–ø–ª—ñ–∫–∞—Ü—ñ—è/–∫–µ—à
        # 2.1) backoff –ø–æ –∫–∞–Ω–∞–ª—É (–∂–æ–¥–Ω–∏—Ö –≤–µ–ª–∏–∫–∏—Ö –∑–∞—Ç—Ä–∏–º–æ–∫)
        if channel_id is not None:
            until = backoff_get(channel_id)
            if until:
                left = max(0, until - int(time.time()))
                results.append(fmt_result_line(idx, url, "flood_wait", extra=f"{left}s", title=title_cached))
                progress.add_status("flood_wait")
                await _micro_pause()
                continue

            # 2.2) —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ –∫–∞–Ω–∞–ª—É
            final = any_final_for_channel(channel_id)
            if final:
                results.append(fmt_result_line(idx, url, "cached", extra=final, title=title_cached))
                progress.add_status("already" if final in ("joined", "already", "requested") else "invalid")
                await _micro_pause()
                continue

        # 2.3) —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ URL (–∫–æ–ª–∏ channel_id –≤—Å–µ —â–µ None)
        ust = url_get(url)
        if ust in ("joined", "already", "requested", "invalid", "private"):
            title_from_url = url_title_get(url) or title_cached
            results.append(fmt_result_line(idx, url, "cached", extra=ust, title=title_from_url))
            progress.add_status("already" if ust in ("joined", "already", "requested") else "invalid")
            await _micro_pause()
            continue

        # 3) –ü—É–ª –∞–∫–∞—É–Ω—Ç—ñ–≤
        slots = list(iter_pool_clients())
        if not slots:
            rest = [url] + [u for u in links[idx:] if u not in used]
            origin_chat = getattr(progress, "peer", None)
            origin_msg = getattr(progress, "msg_id", None) or 0
            added = lq_enqueue(
                rest,
                batch_id=f"batch:{origin_msg}",
                origin_chat=origin_chat,
                origin_msg=origin_msg,
            )
            results.append({
                "idx": idx, "url": url, "title": title_cached or "",
                "status_code": "flood_wait",
                "status_text": f"‚è≥ –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö; —É —á–µ—Ä–∑—ñ +{added}",
                "actor": "",
            })
            progress.add_status("flood_wait")
            await _micro_pause()
            break

        # 4) –°–ø—Ä–æ–±–∞ join –ø–æ —Å–ª–æ—Ç–∞—Ö
        final_status_code: Optional[str] = None
        line: Optional[dict] = None
        last_kind: Optional[str] = None
        did_api_call: bool = False  # <‚Äî throttle –º—ñ–∂ –ª—ñ–Ω–∫–∞–º–∏ –ª–∏—à–µ —è–∫—â–æ –±—É–≤ ensure_join

        for slot in slots:
            # üî∏ –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–π–Ω—è—Ç—ñ –∞–±–æ ¬´–ø—Ä–∏—Å–ø–∞–Ω—ñ¬ª —Å–ª–æ—Ç–∏ (FLOOD / cooldown)
            now_ts = time.time()
            if getattr(slot, "busy", False):
                log.debug("process: skip slot %s (busy)", getattr(slot, "name", "?"))
                continue
            if getattr(slot, "next_ready", 0) > now_ts:
                log.debug(
                    "process: skip slot %s (sleep until %.0f, now %.0f)",
                    getattr(slot, "name", "?"), getattr(slot, "next_ready", 0), now_ts
                )
                continue

            client = getattr(slot, "client", slot)
            who = display_name(slot)
            progress.set_current(url, actor=who)

            # –Ω–µ –¥—É–±–ª—é—î–º–æ —Ä–æ–±–æ—Ç—É, —è–∫—â–æ –ø–æ –∫–∞–Ω–∞–ª—É –≤–∂–µ —î —Ñ—ñ–Ω–∞–ª –¥–ª—è —Ü—å–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞
            if channel_id is not None:
                acc_status = get_membership(who, channel_id)
                if acc_status in ("joined","already","requested","invalid","private","blocked","too_many"):
                    continue

            # —Ä–µ–∞–ª—å–Ω–∏–π –º–µ—Ä–µ–∂–µ–≤–∏–π –≤–∏–∫–ª–∏–∫
            status, title, kind, cid_after, invite_hash = await ensure_join(client, url)
            did_api_call = True
            last_kind = kind
            cid_eff = channel_id if channel_id is not None else cid_after

            # –æ–Ω–æ–≤–ª—é—î–º–æ –º–∞–ø–∏/–Ω–∞–∑–≤–∏
            if cid_eff is not None:
                url_channel_put(url, cid_eff)
            if title:
                if cid_eff is not None:
                    channel_title_put(cid_eff, title)
                url_title_put(url, title)
            if invite_hash:
                map_invite_set(url, cid_eff, title or None)

            # –∑–∞–ø–∏—Å —É –ë–î
            if cid_eff is not None and status in ("joined","already","requested","invalid","private","blocked","too_many"):
                upsert_membership(who, cid_eff, status)
            if cid_eff is None and status in ("joined","already","requested","invalid","private"):
                url_put(url, status)

            # –≥—ñ–ª–∫–∏ —Å—Ç–∞—Ç—É—Å—ñ–≤ ‚Äî —Ñ–æ—Ä–º—É—î–º–æ –ª—ñ–Ω—ñ—é + —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –∫–æ–¥
            if status == "already":
                line = fmt_result_line(idx, url, "already", who, title=title or title_cached)
                final_status_code = "already"
                break

            elif status == "joined":
                line = fmt_result_line(idx, url, "joined", who, title=title or title_cached)
                final_status_code = "joined"
                bump_cooldown(client, 8 if kind == "invite" else 3)
                break

            elif status == "requested":
                line = fmt_result_line(idx, url, "requested", who, title=title or title_cached)
                final_status_code = "already"   # —É –∑–≤–µ–¥–µ–Ω–Ω—ñ —Ä–∞—Ö—É—î–º–æ —è–∫ ¬´—É—Å–ø—ñ—à–Ω–æ/–±–µ–∑ –ø—Ä—è–º–æ–≥–æ join¬ª
                bump_cooldown(client, 6)
                break

            elif status == "invalid":
                line = fmt_result_line(idx, url, "invalid", who, title=title or title_cached)
                final_status_code = "invalid"
                break

            elif status == "private":
                line = fmt_result_line(idx, url, "private", who, title=title or title_cached)
                final_status_code = "invalid"
                break

            elif status == "blocked":
                line = fmt_result_line(idx, url, "blocked", who, title=title or title_cached)
                final_status_code = final_status_code or "invalid"
                continue

            elif status == "too_many":
                line = fmt_result_line(idx, url, "too_many", who, title=title or title_cached)
                try:
                    mark_limit(slot, days=2)
                except Exception:
                    pass
                final_status_code = final_status_code or "invalid"
                continue

            elif isinstance(status, str) and status.startswith("flood_wait"):
                # FLOOD: –ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —ñ —Ä–µ—à—Ç—É URL —É —á–µ—Ä–≥—É –∑ backoff, —Å–ª–æ—Ç ‚Äî –º'—è–∫–æ –ø—Ä–∏—Å–∏–ø–ª—è—î–º–æ
                try:
                    sec = int(str(status).split("_")[-1])
                except Exception:
                    sec = 60

                line = fmt_result_line(idx, url, "flood_wait", who, extra=f"{sec}s", title=title or title_cached)
                final_status_code = final_status_code or "flood_wait"

                # –∫–æ—Ä–æ—Ç–∫–∏–π –ª–æ–∫–∞–ª—å–Ω–∏–π ¬´—Å–æ–Ω¬ª —Å–ª–æ—Ç–∞; –¥–æ–≤–≥–∏–π —Ä–æ–±–∏—Ç–∏–º–µ —á–µ—Ä–≥–∞
                try:
                    mark_flood(client, int(sec), strategy="soft")
                except Exception:
                    pass

                # –∫–∞–Ω–∞–ª –ø—ñ–¥ FLOOD -> –Ω–µ —á—ñ–ø–∞—Ç–∏ –π–æ–≥–æ n —Å–µ–∫—É–Ω–¥
                if cid_eff is not None:
                    backoff_set(cid_eff, int(sec))

                # –≤—ñ–¥–¥–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π + —Ä–µ—à—Ç—É –ø–∞–∫–µ—Ç–∞ —É —á–µ—Ä–≥—É –∑ backoff‚Äô–æ–º
                origin_chat = getattr(progress, "peer", None)
                origin_msg = getattr(progress, "msg_id", None) or 0
                remaining = [u for u in links[idx:] if u not in used]
                to_queue = [url] + remaining
                added = lq_enqueue(
                    to_queue,
                    batch_id=f"batch:{origin_msg}",
                    origin_chat=origin_chat,
                    origin_msg=origin_msg,
                    delay_sec=int(sec),
                    reason="flood_wait",
                )
                log.debug("process: FLOOD_WAIT %ss -> queued current+rest (n=%d)", sec, added)

                # –º–∏ –Ω–µ —Ö–æ—á–µ–º–æ —â–µ –π –º—ñ–∂–ª—ñ–Ω–∫–æ–≤–∏–π throttle —Ç—É—Ç —É ¬´–ø—Ä—è–º–æ–º—É¬ª –ø—Ä–æ—Ö–æ–¥—ñ
                did_api_call = False
                break

            else:
                line = fmt_result_line(idx, url, "temp", who, extra=status, title=title or title_cached)
                final_status_code = final_status_code or "waiting"
                continue

        if line is None:
            line = fmt_result_line(idx, url, "waiting", title=title_cached or "")
            final_status_code = final_status_code or "waiting"

        results.append(line)

        # ‚úÖ –Ü–Ω–∫—Ä–µ–º–µ–Ω—Ç—É—î–º–æ –ø—ñ–¥—Å—É–º–æ–∫ –û–î–ò–ù —Ä–∞–∑ –Ω–∞ URL (–±–µ–∑ –¥—É–±–ª—é–≤–∞–Ω—å –Ω–∞ FLOOD –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Å–ª–æ—Ç—ñ–≤)
        if final_status_code in ("joined","already","invalid","flood_wait","waiting"):
            progress.add_status(final_status_code if final_status_code != "waiting" else "already")
        else:
            progress.add_status("already")

        # ‚úÖ Throttle —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –±—É–≤ —Ä–µ–∞–ª—å–Ω–∏–π API-–≤–∏–∫–ª–∏–∫ ensure_join
        if did_api_call:
            await throttle_between_links(last_kind, url)
        else:
            await _micro_pause()

        # –Ø–∫—â–æ –º–∏ —â–æ–π–Ω–æ –ø–æ–ø–∞–¥–∞–ª–∏ —É FLOOD —ñ –≤—ñ–¥–¥–∞–ª–∏ –≤—Å–µ —É —á–µ—Ä–≥—É ‚Äî –¥–æ—Ü—ñ–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–≤–∞—Ç–∏ –ø–∞–∫–µ—Ç
        if final_status_code == "flood_wait":
            break

    await progress.finish(footer=fmt_summary(results))
    log.info("batch done: total=%d uniq=%d", len(links), len(set(links)))