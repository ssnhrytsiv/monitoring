# app/flows/batch_links/process_links.py
import logging
import asyncio
from typing import List, Optional
from html import escape as _escape

from telethon.tl import types as ttypes  # ‚ûï –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è MessageEntityTextUrl

from app.plugins.progress_live import DebouncedProgress
from app.utils.link_parser import extract_links
from app.utils.throttle import throttle_between_links
from app.utils.formatting import fmt_result_line
from app.services.joiner import probe_channel_id, ensure_join
from app.services.account_pool import (
    iter_pool_clients, bump_cooldown, mark_flood, mark_limit,
)
from app.services.membership_db import (
    upsert_membership, get_membership, any_final_for_channel, url_get, url_put,
)
from app.services.link_queue import enqueue as lq_enqueue
from .common import display_name

log = logging.getLogger("flow.batch_links.process")


def _build_full_footer(items: List[dict]) -> str:
    """
    –§–æ—Ä–º—É—î –¥–≤–æ—Ä—è–¥–∫–æ–≤–∏–π –ø—ñ–¥—Å—É–º–æ–∫ –¥–ª—è –í–°–Ü–• —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.
    –§–æ—Ä–º–∞—Ç:
      üìä –ü—ñ–¥—Å—É–º–æ–∫ (–≤—Å—ñ):
      N. –ù–∞–∑–≤–∞
         <a href="URL">–ü–æ—Å–∏–ª–∞–Ω–Ω—è</a> ‚Äî –°—Ç–∞—Ç—É—Å
    –Ø–∫—â–æ –Ω–∞–∑–≤–∏ –Ω–µ–º–∞—î: N. <a href="URL">–ü–æ—Å–∏–ª–∞–Ω–Ω—è</a> ‚Äî –°—Ç–∞—Ç—É—Å (–æ–¥–Ω–æ—Ä—è–¥–∫–æ–≤–æ).
    """
    out: List[str] = ["üìä –ü—ñ–¥—Å—É–º–æ–∫ (–≤—Å—ñ):"]
    for it in items:
        idx = it["idx"]
        url = it["url"]
        title = it.get("title") or ""
        status = it["status"]
        if title:
            out.append(f"{idx}. {_escape(title)}")
            out.append(f"   <a href=\"{_escape(url)}\">–ü–æ—Å–∏–ª–∞–Ω–Ω—è</a> ‚Äî {status}")
        else:
            out.append(f"{idx}. <a href=\"{_escape(url)}\">–ü–æ—Å–∏–ª–∞–Ω–Ω—è</a> ‚Äî {status}")
    return "\n".join(out)


# –ö–æ—Ä–æ—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–∞ –ø–∞—É–∑–∞ –¥–ª—è –∫–µ–π—Å—ñ–≤ –±–µ–∑ –º–µ—Ä–µ–∂–µ–≤–∏—Ö –¥—ñ–π (–∫–µ—à/–¥—É–±–ª—ñ/—Å–∫–∏–ø).
async def _short_pause():
    try:
        await asyncio.sleep(0.08)  # ~80 ms, —â–æ–± –Ω–µ ‚Äú–∑–∞–±–∏–≤–∞—Ç–∏‚Äù —Ü–∏–∫–ª
    except Exception:
        pass


def _extract_hidden_links_from_message(msg) -> List[str]:
    """
    –î—ñ—Å—Ç–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑ –≥—ñ–ø–µ—Ä—Ç–µ–∫—Å—Ç—É (MessageEntityTextUrl) —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ Telethon.
    –ü–æ–≤–µ—Ä—Ç–∞—î —á–∏—Å—Ç—ñ URL. –î—É–±–ª—ñ –Ω–µ –≤–∏–¥–∞–ª—è—î (—Ü–µ –∑—Ä–æ–±–∏–º–æ –ø—ñ–∑–Ω—ñ—à–µ —Ä–∞–∑–æ–º —ñ–∑ —Ç–µ–∫—Å—Ç–æ–≤–∏–º–∏).
    """
    urls: List[str] = []
    try:
        entities = getattr(msg, "entities", None)
        if not entities:
            return urls
        for ent in entities:
            if isinstance(ent, ttypes.MessageEntityTextUrl):
                u = getattr(ent, "url", None)
                if u:
                    urls.append(u.strip())
    except Exception:
        pass
    return urls


async def process_links(message, text: str):
    # 1) URL —ñ–∑ raw-—Ç–µ–∫—Å—Ç—É
    links_text = extract_links(text)

    # 2) –î–æ–¥–∞—Ç–∫–æ–≤–æ URL —ñ–∑ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏—Ö –≥—ñ–ø–µ—Ä–ø–æ—Å–∏–ª–∞–Ω—å —É —Å–∞–º–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
    #    (message —Ç—É—Ç ‚Äî —Ü–µ –ø–æ–¥—ñ—è/–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è Telethon)
    hidden = _extract_hidden_links_from_message(message)
    links_all = links_text + hidden

    # –£—Å—É–≤–∞—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –ø–æ—Ä—è–¥–æ–∫
    seen, links = set(), []
    for u in links_all:
        if u and u not in seen:
            seen.add(u)
            links.append(u)

    if not links:
        await message.reply("‚ùå –ü–æ—Å–∏–ª–∞–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    used: set[str] = set()
    results: List[str] = []
    result_items: List[dict] = []  # –∑—ñ–±—Ä–∞–Ω—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–ª—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ—É—Ç–µ—Ä–∞

    progress = DebouncedProgress(
        client=message.client,
        peer=message.chat_id,
        title="–ü–∞–∫–µ—Ç –ø–æ—Å–∏–ª–∞–Ω—å",
        total=len(links),
    )
    await progress.start()
    log.info("batch start: raw=%d uniq=%d", len(links), len(set(links)))

    probe_client = None
    slots_probe = list(iter_pool_clients())
    if slots_probe:
        probe_client = getattr(slots_probe[0], "client", slots_probe[0])

    for idx, url in enumerate(links, start=1):
        progress.set_current(url)
        title_current: Optional[str] = None

        # ---- 1) –î—É–±–ª—ñ: –±–µ–∑ –º–µ—Ä–µ–∂—ñ, –∫–æ—Ä–æ—Ç–∫–∞ –ø–∞—É–∑–∞
        if url in used:
            line = fmt_result_line(idx, url, "duplicate")
            results.append(line)
            progress.add_status("already")
            await _short_pause()
            continue
        used.add(url)

        # ---- 2) –õ–µ–≥–∫–∞ –ø—Ä–æ–±–∞ (–±–µ–∑ API –¥–ª—è —ñ–Ω–≤–∞–π—Ç—ñ–≤)
        channel_id: Optional[int] = None
        if probe_client is not None:
            try:
                cid, title_probe, _, _ = await probe_channel_id(probe_client, url)
                title_current = title_probe or title_current
                channel_id = cid
            except Exception:
                channel_id = None

        # ---- 3) –Ø–∫—â–æ —î —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ channel_id ‚Äî —Å–∫–∏–ø–∞—î–º–æ (–±–µ–∑ –º–µ—Ä–µ–∂—ñ)
        if channel_id is not None:
            final = any_final_for_channel(channel_id)
            if final:
                line = fmt_result_line(idx, url, "cached", extra=final)
                results.append(line)
                progress.add_status("already" if final in ("joined", "already") else "invalid")
                await _short_pause()
                status_part = line.split(" ‚Äî ", 1)[1] if " ‚Äî " in line else line
                result_items.append({"idx": idx, "url": url, "title": title_current, "status": status_part})
                continue
        else:
            # ---- 4) –Ø–∫—â–æ —î —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ URL ‚Äî —Å–∫–∏–ø–∞—î–º–æ (–±–µ–∑ –º–µ—Ä–µ–∂—ñ)
            ust = url_get(url)
            if ust in ("joined", "already", "requested", "invalid", "private"):
                line = fmt_result_line(idx, url, "cached", extra=ust)
                results.append(line)
                status_part = line.split(" ‚Äî ", 1)[1] if " ‚Äî " in line else line
                result_items.append({"idx": idx, "url": url, "title": title_current, "status": status_part})
                progress.add_status("already" if ust in ("joined", "already") else "invalid")
                await _short_pause()
                continue

        # ---- 5) –ù–µ–º–∞ –≤—ñ–ª—å–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ ‚Äî –¥–æ–¥–∞—î–º–æ —Ä–µ—à—Ç—É —É —á–µ—Ä–≥—É —Ç–∞ –∑–∞–≤–µ—Ä—à—É—î–º–æ
        slots = list(iter_pool_clients())
        if not slots:
            rest = [url] + [u for u in links[idx:] if u not in used]
            added = lq_enqueue(
                rest, batch_id=f"batch:{message.id}",
                origin_chat=message.chat_id, origin_msg=message.id
            )
            line = f"{idx}. {url} ‚Äî üí§ –ù–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤; –¥–æ–¥–∞–Ω–æ —É —á–µ—Ä–≥—É: {added} URL"
            results.append(line)
            status_part = line.split(" ‚Äî ", 1)[1] if " ‚Äî " in line else line
            result_items.append({"idx": idx, "url": url, "title": title_current, "status": status_part})
            progress.add_status("flood_wait")
            break

        # ---- 6) –°–ø—Ä–æ–±–∞ –ø—ñ–¥–ø–∏—Å–∫–∏/–ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        line = None
        last_kind = None

        for slot in slots:
            client = getattr(slot, "client", slot)
            who = display_name(slot)
            progress.set_current(url, actor=who)

            # –Ø–∫—â–æ –≤–∂–µ –º–∞—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è —Ü—å–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞ –ø–æ channel_id ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
            if channel_id is not None:
                acc_status = get_membership(who, channel_id)
                if acc_status in ("joined","already","requested","invalid","private","blocked","too_many"):
                    continue

            status, title, kind, cid_after, _ = await ensure_join(client, url)
            last_kind = kind
            cid_eff = channel_id or cid_after
            if title:
                title_current = title_current or title

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å–∏
            if cid_eff is not None and status in ("joined","already","requested","invalid","private","blocked","too_many"):
                upsert_membership(who, cid_eff, status)
            if cid_eff is None and status in ("joined","already","requested","invalid","private"):
                url_put(url, status)

            # –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            if status == "already":
                line = fmt_result_line(idx, url, "already", who)
                progress.add_status("already")
                break

            elif status == "joined":
                line = fmt_result_line(idx, url, "joined", who)
                progress.add_status("joined")
                bump_cooldown(client, 8 if kind == "invite" else 3)
                break

            elif status == "requested":
                line = fmt_result_line(idx, url, "requested", who)
                progress.add_status("already")
                bump_cooldown(client, 6)
                break

            elif status == "invalid":
                line = fmt_result_line(idx, url, "invalid", who)
                progress.add_status("invalid")
                break

            elif status == "private":
                line = fmt_result_line(idx, url, "private", who)
                progress.add_status("invalid")
                break

            elif status == "blocked":
                line = fmt_result_line(idx, url, "blocked", who)
                continue

            elif status == "too_many":
                line = fmt_result_line(idx, url, "too_many", who)
                try:
                    mark_limit(slot, days=2)
                except Exception:
                    pass
                continue

            elif isinstance(status, str) and status.startswith("flood_wait"):
                try:
                    sec = int(str(status).split("_")[-1])
                except Exception:
                    sec = 60
                line = fmt_result_line(idx, url, "flood_wait", who, extra=f"{sec}s")
                progress.add_status("flood_wait")
                try:
                    mark_flood(client, int(sec))
                except Exception:
                    pass
                continue

            else:
                line = fmt_result_line(idx, url, "temp", who, extra=status)
                continue

        if not line:
            line = fmt_result_line(idx, url, "waiting")

        results.append(line)
        status_part = line.split(" ‚Äî ", 1)[1] if " ‚Äî " in line else line
        result_items.append({
            "idx": idx,
            "url": url,
            "title": title_current,
            "status": status_part,
        })

        # ---- 7) –¢—Ä–æ—Ç–ª—ñ–Ω–≥ –º—ñ–∂ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏
        if last_kind:
            await throttle_between_links(last_kind, url)
        else:
            await _short_pause()

    # –§—ñ–Ω–∞–ª—å–Ω–∏–π —Ñ—É—Ç–µ—Ä
    try:
        footer_full = _build_full_footer(result_items)
    except Exception:
        footer_full = "üìä –ü—ñ–¥—Å—É–º–æ–∫ (–≤—Å—ñ):\n(–ø–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ñ—É—Ç–µ—Ä–∞)"
    await progress.finish(footer=footer_full)
    log.info("batch done: total=%d uniq=%d", len(links), len(set(links)))