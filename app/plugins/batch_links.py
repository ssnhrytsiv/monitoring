import re
import asyncio
import logging
from telethon import events
from telethon.tl import types as ttypes  # –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ entities/markup

from app.services.membership_db import init as memb_init
from app.services.link_queue import init as lq_init
from app.flows.batch_links import process_links, run_link_queue_worker

log = logging.getLogger("plugin.batch_links")

_MONITOR_ENABLED = False
_MONITOR_CHAT_ID = None
_CONTROL_PEER_ID = None


def setup(client, control_peer=None, monitor_buffer=None, **kwargs):
    global _CONTROL_PEER_ID
    _CONTROL_PEER_ID = control_peer

    memb_init()  # —á–∏—Ç–∞—î DB_PATH —ñ–∑ .env –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –º–æ–¥—É–ª—è
    lq_init()

    log.info("batch_links: setup(control_peer=%s, monitor_buffer=%s)", control_peer, monitor_buffer)

    @client.on(events.NewMessage(pattern=r'^/monitor_links_on$'))
    async def _on(evt):
        if _CONTROL_PEER_ID is not None and evt.chat_id != _CONTROL_PEER_ID:
            return
        global _MONITOR_ENABLED, _MONITOR_CHAT_ID
        _MONITOR_ENABLED = True
        _MONITOR_CHAT_ID = evt.chat_id
        await evt.reply("üü¢ –†–µ–∂–∏–º –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å —É–≤—ñ–º–∫–Ω–µ–Ω–æ. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–ø–∏—Å–æ–∫ t.me-–ø–æ—Å–∏–ª–∞–Ω—å –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.")

    @client.on(events.NewMessage(pattern=r'^/monitor_links_off$'))
    async def _off(evt):
        if _CONTROL_PEER_ID is not None and evt.chat_id != _CONTROL_PEER_ID:
            return
        global _MONITOR_ENABLED, _MONITOR_CHAT_ID
        _MONITOR_ENABLED = False
        _MONITOR_CHAT_ID = None
        await evt.reply("üî¥ –†–µ–∂–∏–º –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å –≤–∏–º–∫–Ω–µ–Ω–æ.")

    @client.on(events.NewMessage(pattern=r'^/monitor_links_status$'))
    async def _status(evt):
        if _CONTROL_PEER_ID is not None and evt.chat_id != _CONTROL_PEER_ID:
            return
        await evt.reply(f"‚ÑπÔ∏è monitor_links: {'ON' if _MONITOR_ENABLED else 'OFF'}; chat={_MONITOR_CHAT_ID}")

    @client.on(events.NewMessage())
    async def _msg(evt):
        # —Ñ—ñ–ª—å—Ç—Ä–∏ –¥–æ—Å—Ç—É–ø—É/—Ä–µ–∂–∏–º—É
        if _CONTROL_PEER_ID is not None and evt.chat_id != _CONTROL_PEER_ID:
            return
        if not _MONITOR_ENABLED:
            return
        if _MONITOR_CHAT_ID is not None and evt.chat_id != _MONITOR_CHAT_ID:
            return

        msg = evt.message
        text = evt.raw_text or ""

        # 1) –ü–æ—Å–∏–ª–∞–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç—É
        has_text_link = bool(
            re.search(r"https?://t\.me/", text, flags=re.IGNORECASE)
            or re.search(r"(?:^|\s)@[A-Za-z0-9_]{3,}", text)
        )

        # 2) –ü—Ä–∏—Ö–æ–≤–∞–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —É –≥—ñ–ø–µ—Ä—Ç–µ–∫—Å—Ç—ñ (MessageEntityTextUrl)
        ents = getattr(msg, "entities", None) or []
        has_entity_link = any(isinstance(e, ttypes.MessageEntityTextUrl) for e in ents)

        # 3) URL —É –∫–Ω–æ–ø–∫–∞—Ö (inline/reply markup)
        markup = getattr(msg, "reply_markup", None)
        has_markup_url = False
        try:
            if isinstance(markup, (ttypes.ReplyInlineMarkup, ttypes.ReplyKeyboardMarkup)):
                rows = getattr(markup, "rows", []) or []
                for row in rows:
                    for btn in getattr(row, "buttons", []) or []:
                        if hasattr(btn, "url") and getattr(btn, "url", None):
                            has_markup_url = True
                            break
                    if has_markup_url:
                        break
        except Exception:
            # –Ω–µ –≤–∞–ª–∏–º–æ —Ö–µ–Ω–¥–ª–µ—Ä —á–µ—Ä–µ–∑ –µ–∫–∑–æ—Ç–∏–∫—É –≤ markup
            pass

        # –Ø–∫—â–æ –≤–∑–∞–≥–∞–ª—ñ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ —Ç–∏–ø—É –ø–æ—Å–∏–ª–∞–Ω—å ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ
        if not (has_text_link or has_entity_link or has_markup_url):
            return

        try:
            # –ü–µ—Ä–µ–¥–∞—î–º–æ msg, —â–æ–± process_links –º–∞–≤ –¥–æ—Å—Ç—É–ø –¥–æ entities/markup
            await process_links(msg, text)
        except Exception as e:
            log.exception("batch_links error: %s", e)
            await evt.reply(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: {e}")

    # –≤–æ—Ä–∫–µ—Ä —á–µ—Ä–≥–∏
    try:
        client.loop.create_task(run_link_queue_worker(client))
    except Exception:
        asyncio.create_task(run_link_queue_worker(client))

    log.info("batch_links plugin loaded")