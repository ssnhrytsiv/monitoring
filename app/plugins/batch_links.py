# app/plugins/batch_links.py
from __future__ import annotations

import logging
import time
from typing import Callable, Dict, Optional, Union, Awaitable

from telethon import events
from telethon.tl.custom.message import Message

from app.services.link_queue import (
    list_active as lq_list_active,
    count_active as lq_count_active,
)
from app.plugins.progress_live import DebouncedProgress
from app.utils.link_parser import extract_links_any
from app.utils.notices import reply_info, reply_error

log = logging.getLogger("plugin.batch_links")

# submitter-–∏ –∑–∞ chat_id –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —á–∞—Ç—É
_registered_submitters: Dict[int, Callable[[Union[str, Message]], Awaitable[None]]] = {}


# ---------- —Ñ–∞–±—Ä–∏–∫–∞ submitter-–∞ ----------
def _make_submitter(client, control_peer: int, monitor_buffer):
    async def submit(msg_or_text: Union[str, Message]) -> None:
        # 1) –î—ñ—Å—Ç–∞—î–º–æ —Ç–µ–∫—Å—Ç —ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è reply (—è–∫—â–æ —î)
        if isinstance(msg_or_text, Message):
            text = (msg_or_text.raw_text or "").strip()
            evt_for_reply: Optional[Message] = msg_or_text
        else:
            text = (msg_or_text or "").strip()
            evt_for_reply = None

        # 2) –í–∏—Ç—è–≥—É—î–º–æ –ª—ñ–Ω–∫–∏
        links = extract_links_any(text)
        if not links:
            note = (
                "‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è. "
                "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–∏–ª–∞–Ω—å –≤ –æ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ."
            )
            if evt_for_reply is not None:
                await reply_info(evt_for_reply, note)
            else:
                await client.send_message(control_peer, note, link_preview=False)
            return

        # 3) –ü—Ä–æ–≥—Ä–µ—Å (debounce –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ)
        progress = DebouncedProgress(client, control_peer, "–ü–∞–∫–µ—Ç –ø–æ—Å–∏–ª–∞–Ω—å", len(links))
        await progress.start()

        try:
            # 4) –ó–∞–ø—É—Å–∫–∞—î–º–æ ¬´–¥–≤–∏–≥—É–Ω¬ª –æ–±—Ä–æ–±–∫–∏
            from app.flows.batch_links.process_links import process_links
            await process_links(
                links=links,
                progress=progress,
                monitor_buffer=monitor_buffer,
            )
        except Exception as e:
            await progress.finish(footer=f"‚ùóÔ∏è –ü–æ–º–∏–ª–∫–∞: {e!r}")
            msg = f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: {e!r}"
            if evt_for_reply is not None:
                await reply_error(evt_for_reply, msg)
            else:
                await client.send_message(control_peer, f"‚ùóÔ∏è {msg}", link_preview=False)
            log.exception("plugin.batch_links: batch processing error")
            return

        await progress.finish()

    return submit


# ---------- –ø—É–±–ª—ñ—á–Ω–∏–π entry-point –ø–ª–∞–≥—ñ–Ω–∞ ----------
def setup(client, *, control_peer: int, monitor_buffer) -> None:
    """
    –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∑ app/telethon_client.py –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–ª–∞–≥—ñ–Ω—ñ–≤.
    """
    # –†–µ—î—Å—Ç—Ä—É—î–º–æ submitter –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —á–∞—Ç—É
    submitter = _make_submitter(client, control_peer, monitor_buffer)
    _registered_submitters[control_peer] = submitter
    log.info("batch_links: submitter registered for chat %s", control_peer)

    # –ö–æ–º–∞–Ω–¥–∏ –≤–º–∏–∫–∞–Ω–Ω—è/–≤–∏–º–∏–∫–∞–Ω–Ω—è —Ä–µ–∂–∏–º—É –ø—Ä–∏–π–æ–º—É –ø–æ—Å–∏–ª–∞–Ω—å
    client.add_event_handler(
        lambda e: _cmd_on(e, monitor_buffer, control_peer),
        events.NewMessage(chats=control_peer, pattern=r"^/monitor_links_on$")
    )
    client.add_event_handler(
        lambda e: _cmd_off(e, monitor_buffer, control_peer),
        events.NewMessage(chats=control_peer, pattern=r"^/monitor_links_off$")
    )

    # –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å—É —á–µ—Ä–≥–∏ (–∫–æ—Ä–æ—Ç–∫–∏–π ETA + —Ç–æ–ø-10)
    client.add_event_handler(
        lambda e: _cmd_status(e, control_peer),
        events.NewMessage(chats=control_peer, pattern=r"^/status$")
    )

    # –£—Ç–∏–ª—ñ—Ç–∏ —á–µ—Ä–≥–∏
    client.add_event_handler(
        lambda e: _cmd_queue_status(e, control_peer),
        events.NewMessage(chats=control_peer, pattern=r"^/queue_status$")
    )
    client.add_event_handler(
        lambda e: _cmd_queue_clear_dryrun(e, control_peer),
        events.NewMessage(chats=control_peer, pattern=r"^/queue_clear_dryrun$")
    )
    client.add_event_handler(
        lambda e: _cmd_queue_clear(e, control_peer),
        events.NewMessage(chats=control_peer, pattern=r"^/queue_clear(?:\s+.*)?$")
    )

    # –û–±—Ä–æ–±–∫–∞ –¥–æ–≤—ñ–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–º—É —á–∞—Ç—ñ
    client.add_event_handler(
        lambda e: _on_msg(e, monitor_buffer, control_peer),
        events.NewMessage(chats=control_peer)
    )

    log.info("batch_links plugin loaded")


# ---------- –∫–æ–º–∞–Ω–¥–∏ ----------
async def _cmd_on(evt: Message, monitor_buffer, control_peer: int) -> None:
    if evt.chat_id != control_peer:
        return
    monitor_buffer.active = True
    if hasattr(monitor_buffer, "collected_links"):
        monitor_buffer.collected_links.clear()
    await reply_info(
        evt,
        "‚úÖ –†–µ–∂–∏–º –ø—Ä–∏–π–æ–º—É –ø–æ—Å–∏–ª–∞–Ω—å —É–≤—ñ–º–∫–Ω–µ–Ω–æ.\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –û–î–ù–ò–ú –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤/—ñ–Ω–≤–∞–π—Ç—ñ–≤/—é–∑–µ—Ä–Ω–µ–π–º—ñ–≤."
    )
    log.info("monitor links ON in chat %s", control_peer)


async def _cmd_off(evt: Message, monitor_buffer, control_peer: int) -> None:
    if evt.chat_id != control_peer:
        return
    monitor_buffer.active = False
    if hasattr(monitor_buffer, "collected_links"):
        monitor_buffer.collected_links.clear()
    await reply_info(evt, "‚õîÔ∏è –†–µ–∂–∏–º –ø—Ä–∏–π–æ–º—É –ø–æ—Å–∏–ª–∞–Ω—å –≤–∏–º–∫–Ω–µ–Ω–æ.")
    log.info("monitor links OFF in chat %s", control_peer)


async def _cmd_status(evt: Message, control_peer: int) -> None:
    """
    /status ‚Äî –ø–æ–∫–∞–∑—É—î –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ç–∞–Ω —á–µ—Ä–≥–∏:
      ‚Ä¢ –∫—ñ–ª—å–∫—ñ—Å—Ç—å queued/processing
      ‚Ä¢ –ø—Ä–∏–±–ª–∏–∑–Ω–∏–π ETA –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º next_try_ts
      ‚Ä¢ —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—à–∏—Ö 10 –ø–æ—Å–∏–ª–∞–Ω—å (—ñ–∑ –ø—Ä–∏—á–∏–Ω–æ—é/–æ—á—ñ–∫—É–≤–∞–Ω–Ω—è–º)
    """
    if evt.chat_id != control_peer:
        return

    queued, processing, total = lq_count_active()
    if total == 0:
        await evt.reply("‚úÖ –ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è. –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å.")
        return

    items = lq_list_active(limit=100)
    now = int(time.time())

    # –ì—Ä—É–±–∞ –æ—Ü—ñ–Ω–∫–∞ —á–∞—Å—É –Ω–∞ 1 –ª—ñ–Ω–∫ (—Å–µ–∫—É–Ω–¥–∏).
    AVG_PER_ITEM_SEC = 7

    # ETA: –≤—Ä–∞—Ö–æ–≤—É—î–º–æ next_try_ts + –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—É –æ–±—Ä–æ–±–∫—É –∫–æ–∂–Ω–æ–≥–æ –∞–π—Ç–µ–º–∞
    current_time = now
    for it in items:
        available = max(it["next_try_ts"], current_time)
        finish = available + AVG_PER_ITEM_SEC
        current_time = finish
    eta_sec = max(0, current_time - now)

    def _fmt_sec(s: int) -> str:
        h = s // 3600
        m = (s % 3600) // 60
        ss = s % 60
        if h > 0:
            return f"{h:02d}:{m:02d}:{ss:02d}"
        return f"{m:02d}:{ss:02d}"

    # –ø–µ—Ä—à—ñ 10 —Ä—è–¥–∫—ñ–≤
    lines = []
    show = min(10, len(items))
    for i in range(show):
        it = items[i]
        wait = max(0, it["next_try_ts"] - now)
        tag = "‚è≥" if it["state"] == "queued" else "‚öôÔ∏è"
        reason = f" (_{it['reason']}_) " if it.get("reason") else ""
        wait_str = f" ¬∑ wait ~{wait}s" if wait > 0 else ""
        lines.append(f"{i+1}. {tag} {it['url']}{reason}{wait_str}")

    more = f"\n‚Ä¶ —Ç–∞ —â–µ {len(items) - show} –∑–∞–ø–∏—Å—ñ–≤" if len(items) > show else ""

    text = (
        "üìä *–°—Ç–∞—Ç—É—Å —á–µ—Ä–≥–∏*\n"
        f"‚Ä¢ queued: *{queued}*\n"
        f"‚Ä¢ processing: *{processing}*\n"
        f"‚Ä¢ active: *{total}*\n"
        f"‚Ä¢ ETA (‚âà): *{_fmt_sec(eta_sec)}*\n\n"
        + "\n".join(lines) + more
    )
    await evt.reply(text, parse_mode="markdown", link_preview=False)


# ---- —É—Ç–∏–ª—ñ—Ç–∏ —á–µ—Ä–≥–∏ ----
async def _cmd_queue_status(evt: Message, control_peer: int) -> None:
    if evt.chat_id != control_peer:
        return
    try:
        from app.utils.queue_cleanup import count_pending, list_pending
    except Exception:
        await evt.reply("‚ùóÔ∏è –ú–æ–¥—É–ª—å `app.utils.queue_cleanup` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    n = count_pending()
    sample = list_pending(limit=15)
    head = "\n".join(f"‚Ä¢ {u} [{st} t={tr}]" for _, u, st, tr in sample)
    more = "" if n <= 15 else f"\n‚Ä¶ —â–µ {n-15} —É —á–µ—Ä–∑—ñ"
    msg = f"üì¶ –ß–µ—Ä–≥–∞ (queued|processing): *{n}*\n"
    if sample:
        msg += f"–ü–µ—Ä—à—ñ {min(n,15)}:\n{head}{more}"
    else:
        msg += "–ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è."
    await evt.reply(msg, parse_mode="markdown", link_preview=False)


async def _cmd_queue_clear_dryrun(evt: Message, control_peer: int) -> None:
    if evt.chat_id != control_peer:
        return
    try:
        from app.utils.queue_cleanup import clear_pending
    except Exception:
        await evt.reply("‚ùóÔ∏è –ú–æ–¥—É–ª—å `app.utils.queue_cleanup` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    n = clear_pending(dry_run=True)
    await evt.reply(f"üß™ Dry-run: –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ {n} –∑–∞–ø–∏—Å—ñ–≤ (queued|processing).", link_preview=False)


async def _cmd_queue_clear(evt: Message, control_peer: int) -> None:
    if evt.chat_id != control_peer:
        return
    # –ø—Ä–æ—Å—Ç–∏–π safeguard: –≤–∏–º–∞–≥–∞—î–º–æ —è–≤–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è "/queue_clear YES"
    text = (evt.raw_text or "").strip()
    if text != "/queue_clear YES":
        await evt.reply(
            "‚ö†Ô∏è –¶—è –∫–æ–º–∞–Ω–¥–∞ –≤–∏–¥–∞–ª—è—î –í–°–Ü queued|processing –∑ —á–µ—Ä–≥–∏ –±–µ–∑–ø–æ–≤–æ—Ä–æ—Ç–Ω–æ.\n"
            "–Ø–∫—â–æ –≤–ø–µ–≤–Ω–µ–Ω–∏–π, –Ω–∞–¥—ñ—à–ª–∏: `/queue_clear YES`",
            link_preview=False
        )
        return

    try:
        from app.utils.queue_cleanup import clear_pending
    except Exception:
        await evt.reply("‚ùóÔ∏è –ú–æ–¥—É–ª—å `app.utils.queue_cleanup` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    n = clear_pending(dry_run=False)
    await evt.reply(f"üßπ –í–∏–¥–∞–ª–µ–Ω–æ {n} –∑–∞–ø–∏—Å—ñ–≤ —ñ–∑ —á–µ—Ä–≥–∏ (queued|processing).", link_preview=False)


# ---------- –ø—Ä–∏–π–æ–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –ª—ñ–Ω–∫–∞–º–∏ ----------
async def _on_msg(evt: events.NewMessage.Event, monitor_buffer, control_peer: int) -> None:
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –≤—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É —Ä–µ–∂–∏–º—ñ /monitor_links_on.
    –ù–ï –≤–∏—Ç—è–≥—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Ç—É—Ç ‚Äî submitter –∑—Ä–æ–±–∏—Ç—å —Ü–µ —Å–∞–º.
    """
    try:
        if evt.chat_id != control_peer:
            return
        if not getattr(monitor_buffer, "active", False):
            return

        # –Ü–≥–Ω–æ—Ä—É—î–º–æ —Å–ª—É–∂–±–æ–≤—ñ/–ø–æ—Ä–æ–∂–Ω—ñ/–∫–æ–º–∞–Ω–¥–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        text = (evt.raw_text or "").strip() if getattr(evt, "raw_text", None) else ""
        if not text or text.startswith("/"):
            return

        submitter = _registered_submitters.get(control_peer)
        if submitter is None:
            submitter = _make_submitter(evt.client, control_peer, monitor_buffer)
            _registered_submitters[control_peer] = submitter

        # –ü–µ—Ä–µ–¥–∞—î–º–æ —Å–∞–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äî submitter —Å–∞–º –≤–∏—Ç—è–≥–Ω–µ —Ç–µ–∫—Å—Ç —ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        await submitter(evt.message)

    except Exception as e:
        await reply_error(evt, f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: {e!s}")
        log.exception("plugin.batch_links: batch processing error")